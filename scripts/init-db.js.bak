const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');
const path = require('path');

async function initDatabase() {
  console.log('🔧 Initialisation de la base de données...');
  
  try {
    // Ouvrir/créer la base de données
    const db = await open({
      filename: path.join(__dirname, '..', 'libekoo.db'),
      driver: sqlite3.Database
    });

    console.log('📊 Création des tables...');

    // Table des utilisateurs
    await db.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        username TEXT NOT NULL,
        socket_id TEXT,
        is_anonymous BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        last_seen DATETIME DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('✓ Table users créée');

    // Table des sessions de chat
    await db.exec(`
      CREATE TABLE IF NOT EXISTS chat_sessions (
        id TEXT PRIMARY KEY,
        user1_id TEXT NOT NULL,
        user2_id TEXT NOT NULL,
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        ended_at DATETIME,
        FOREIGN KEY (user1_id) REFERENCES users(id),
        FOREIGN KEY (user2_id) REFERENCES users(id)
      );
    `);
    console.log('✓ Table chat_sessions créée');

    // Table des messages
    await db.exec(`
      CREATE TABLE IF NOT EXISTS messages (
        id TEXT PRIMARY KEY,
        session_id TEXT NOT NULL,
        user_id TEXT NOT NULL,
        message TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (session_id) REFERENCES chat_sessions(id),
        FOREIGN KEY (user_id) REFERENCES users(id)
      );
    `);
    console.log('✓ Table messages créée');

    // Création des index pour optimiser les performances
    console.log('📑 Création des index...');
    
    await db.exec(`
      CREATE INDEX IF NOT EXISTS idx_messages_session 
      ON messages(session_id);
    `);
    
    await db.exec(`
      CREATE INDEX IF NOT EXISTS idx_messages_created 
      ON messages(created_at DESC);
    `);
    
    await db.exec(`
      CREATE INDEX IF NOT EXISTS idx_sessions_users 
      ON chat_sessions(user1_id, user2_id);
    `);
    
    await db.exec(`
      CREATE INDEX IF NOT EXISTS idx_sessions_status 
      ON chat_sessions(status);
    `);
    
    await db.exec(`
      CREATE INDEX IF NOT EXISTS idx_users_socket 
      ON users(socket_id);
    `);
    
    console.log('✓ Index créés');

    // Nettoyage des anciennes données (optionnel)
    const cleanOldData = process.argv.includes('--clean');
    if (cleanOldData) {
      console.log('🧹 Nettoyage des anciennes données...');
      await db.exec(`
        DELETE FROM messages WHERE created_at < datetime('now', '-7 days');
        DELETE FROM chat_sessions WHERE created_at < datetime('now', '-7 days');
        DELETE FROM users WHERE last_seen < datetime('now', '-30 days') AND is_anonymous = 1;
      `);
      console.log('✓ Anciennes données supprimées');
    }

    // Statistiques
    const userCount = await db.get('SELECT COUNT(*) as count FROM users');
    const sessionCount = await db.get('SELECT COUNT(*) as count FROM chat_sessions');
    const messageCount = await db.get('SELECT COUNT(*) as count FROM messages');

    console.log('\n📊 Statistiques de la base de données:');
    console.log(`   • Utilisateurs: ${userCount.count}`);
    console.log(`   • Sessions: ${sessionCount.count}`);
    console.log(`   • Messages: ${messageCount.count}`);

    await db.close();
    console.log('\n✅ Base de données initialisée avec succès!');

  } catch (error) {
    console.error('\n❌ Erreur lors de l\'initialisation:', error);
    process.exit(1);
  }
}

// Lancer l'initialisation
initDatabase();